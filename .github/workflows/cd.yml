name: 🚀 CD - Deploy to Production

on:
  push:
    branches: [main] # 운영 배포는 main 브랜치에만 반응

permissions:
  id-token: write # OIDC 인증 위해 필요
  contents: read # 소스코드 읽기 권한

env:
  AWS_REGION: ap-northeast-2
  AWS_ROLE_NAME: GitHubDeployRole
  K8S_NAMESPACE: prod
  HELM_RELEASE: jibangyoung

jobs:
  deploy:
    name: Production Deploy
    runs-on: ubuntu-latest

    steps:
      # ✅ Step 1: GitHub 레포지토리 Checkout
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ✅ Step 2: AWS OIDC 인증 (권한 위임)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      # ✅ Step 3: Docker 로그인 및 Backend 빌드/푸시
      - name: Docker Login & Build Push (Backend)
        working-directory: backend
        env:
          IMAGE: ghcr.io/${{ github.repository }}/backend:latest
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker build -t $IMAGE .
          docker push $IMAGE

      # ✅ Step 4: Docker 빌드/푸시 (Frontend)
      - name: Docker Login & Build Push (Frontend)
        working-directory: frontend
        env:
          IMAGE: ghcr.io/${{ github.repository }}/frontend:latest
        run: |
          docker build -t $IMAGE .
          docker push $IMAGE

      # ✅ Step 5: Helm으로 Kubernetes 배포
      - name: Deploy via Helm
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE }} ./infra/helm \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --create-namespace \
            --set image.backend.tag=latest \
            --set image.frontend.tag=latest \
            --values=./infra/helm/values-prod.yaml
